<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlphanumericTooLong" xml:space="preserve">
    <value>Invalid Source Address – Alphanumeric too long</value>
  </data>
  <data name="BlankBody" xml:space="preserve">
    <value>Blank Body</value>
  </data>
  <data name="BlankMessageBody" xml:space="preserve">
    <value>BlankMessageBody</value>
  </data>
  <data name="BlankOrInvalidSourceAddress" xml:space="preserve">
    <value>Blank or Invalid Source Address</value>
  </data>
  <data name="DistributionListIsEmpty" xml:space="preserve">
    <value>Distribution List is Empty</value>
  </data>
  <data name="ErrorCreatingUser" xml:space="preserve">
    <value>Error Creating User</value>
  </data>
  <data name="GeneralDatabaseError" xml:space="preserve">
    <value>General Database Error</value>
  </data>
  <data name="GroupIsEmpty" xml:space="preserve">
    <value>Group is Empty</value>
  </data>
  <data name="InvalidAmountSpecified" xml:space="preserve">
    <value>Invalid Amount Specified</value>
  </data>
  <data name="InvalidContact" xml:space="preserve">
    <value>Invalid Contact</value>
  </data>
  <data name="InvalidCreditId" xml:space="preserve">
    <value>Invalid CreditID</value>
  </data>
  <data name="InvalidCurrencyRequested" xml:space="preserve">
    <value>Invalid Currency Requested</value>
  </data>
  <data name="InvalidDestinationAddress" xml:space="preserve">
    <value>Invalid Destination Address</value>
  </data>
  <data name="InvalidDistributionList" xml:space="preserve">
    <value>Invalid Distribution List</value>
  </data>
  <data name="InvalidFromTimestamp" xml:space="preserve">
    <value>Invalid From Timestamp</value>
  </data>
  <data name="InvalidGroup" xml:space="preserve">
    <value>Invalid Group</value>
  </data>
  <data name="InvalidMissingDetails" xml:space="preserve">
    <value>Invalid/Missing Details</value>
  </data>
  <data name="InvalidNumber" xml:space="preserve">
    <value>Invalid Source Address – Invalid Number</value>
  </data>
  <data name="InvalidScheduleDate" xml:space="preserve">
    <value>Invalid Schedule Date</value>
  </data>
  <data name="InvalidToTimestamp" xml:space="preserve">
    <value>Invalid To Timestamp</value>
  </data>
  <data name="InvalidValidityPeriod" xml:space="preserve">
    <value>Invalid Validity Period</value>
  </data>
  <data name="IsDownForMaintenance" xml:space="preserve">
    <value>The system is down for maintenance</value>
  </data>
  <data name="LicenseExpired" xml:space="preserve">
    <value>License expired</value>
  </data>
  <data name="LicenseInUse" xml:space="preserve">
    <value>License in use</value>
  </data>
  <data name="NoLicenseAvailable" xml:space="preserve">
    <value>No License available</value>
  </data>
  <data name="NoRouteAvailable" xml:space="preserve">
    <value>No Route Available</value>
  </data>
  <data name="NotEnoughCredits" xml:space="preserve">
    <value>Not Enough Credits</value>
  </data>
  <data name="NoUserIDSpecified" xml:space="preserve">
    <value>NoUserIDSpecified</value>
  </data>
  <data name="NumberIsBlacklisted" xml:space="preserve">
    <value>Number is blacklisted</value>
  </data>
  <data name="ReceivedXmlError" xml:space="preserve">
    <value>Received XML Error</value>
  </data>
  <data name="ReturnXmlError" xml:space="preserve">
    <value>Return XML Error</value>
  </data>
  <data name="SingleNumber" xml:space="preserve">
    <value>You have exceeded the limit of messages you can send in a single day to a single number</value>
  </data>
  <data name="SomeNumbersInListFailed" xml:space="preserve">
    <value>Some numbers in list failed</value>
  </data>
  <data name="SourceAddressNotAllowed" xml:space="preserve">
    <value>Source Address Not Allowed (Email2SMS)</value>
  </data>
  <data name="UnableToCreateList" xml:space="preserve">
    <value>Unable to create List</value>
  </data>
  <data name="UnknownAction" xml:space="preserve">
    <value>Unknown Action</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown Error</value>
  </data>
  <data name="UnknownGroup" xml:space="preserve">
    <value>Unknown Group</value>
  </data>
  <data name="UnknownInvalidUser" xml:space="preserve">
    <value>Unknown/Invalid User</value>
  </data>
  <data name="UnknownList" xml:space="preserve">
    <value>Unknown List</value>
  </data>
  <data name="UnknownMessageID" xml:space="preserve">
    <value>Unknown Message ID</value>
  </data>
  <data name="UnknownReportType" xml:space="preserve">
    <value>Unknown Report Type</value>
  </data>
  <data name="UnknownUsernamePassword" xml:space="preserve">
    <value>Unknown Username/Password</value>
  </data>
  <data name="UsersCredits" xml:space="preserve">
    <value>You cannot set a user’s credits to be less than 0</value>
  </data>
  <data name="UserSuspended" xml:space="preserve">
    <value>User Suspended</value>
  </data>
</root>